// Generated by CoffeeScript 1.7.1
var Room, Server, User;

Server = (function() {
  function Server(wsAddress, RoomImpl, UserImpl) {
    this.wsAddress = wsAddress;
    this.RoomImpl = RoomImpl;
    this.UserImpl = UserImpl;
    this.ws = new WebSocket(this.wsAddress);
    this.listeners = {};
    this.calls = {};
    this.room = null;
    this.me = null;
  }

  Server.prototype.listen = function(type, func) {
    return this.listeners[type] = func;
  };

  Server.prototype.setup = function(cb) {
    this.listen('enterRoom', this.onEnterRoom.bind(this));
    this.listen('exitRoom', this.onExitRoom.bind(this));
    this.ws.onmessage = this.onMessage.bind(this);
    this.ws.onerror = this.onError.bind(this);
    this.ws.onclose = this.onClose.bind(this);
    return this.ws.onopen = cb;
  };

  Server.prototype.send = function(type, msg) {
    return this.ws.send(JSON.stringify([type, msg]));
  };

  Server.prototype.call = function(type, msg, cb) {
    var callsForType;
    callsForType = this.calls[type];
    if (!callsForType) {
      callsForType = [cb];
      this.calls[type] = callsForType;
    } else {
      callsForType.push(cb);
    }
    return this.send(type, msg);
  };

  Server.prototype.onMessage = function(event) {
    var callsForType, head, listener, msg, type, _ref;
    _ref = JSON.parse(event.data), type = _ref[0], msg = _ref[1];
    listener = this.listeners[type];
    if (listener) {
      return listener(msg);
    }
    callsForType = this.calls[type];
    if (!callsForType || callsForType.length === 0) {
      return;
    }
    head = callsForType.shift();
    return head(msg);
  };

  Server.prototype.onError = function(event) {};

  Server.prototype.onServerError = function(msg) {};

  Server.prototype.onClose = function(event) {};

  Server.prototype.enterRoom = function(sid) {
    if (this.room) {
      throw 'You are in a room.';
    }
    return this.send('enterRoom', sid);
  };

  Server.prototype.onEnterRoom = function(msg) {
    if (msg.err) {
      this.onServerError(msg.err);
      return null;
    }
    this.room = new this.RoomImpl(this, msg.roomInfo);
    this.room.createPreviousUsers(msg.roomInfo.userInfos, msg.you);
    return this.me = this.room.usersById[msg.you];
  };

  Server.prototype.exitRoom = function() {
    if (!this.room) {
      throw 'You are not in a room.';
    }
    return this.send('exitRoom', '');
  };

  Server.prototype.onExitRoom = function(msg) {
    if (msg.err) {
      this.onServerError(msg.err);
      return null;
    }
    this.room.onExit();
    this.room = null;
    return this.me = null;
  };

  return Server;

})();

Room = (function() {
  function Room(server, roomInfo) {
    this.server = server;
    this.id = roomInfo.id;
    this.sid = roomInfo.sid;
    this.usersById = {};
    this.usersBySid = {};
    this.server.listen('userEnter', this.onUserEnter.bind(this));
    this.server.listen('userExit', this.onUserExit.bind(this));
  }

  Room.prototype.createPreviousUsers = function(userInfos, you) {
    var userInfo, _i, _len;
    for (_i = 0, _len = userInfos.length; _i < _len; _i++) {
      userInfo = userInfos[_i];
      this.onUserEnter(userInfo, userInfo.id === you);
    }
  };

  Room.prototype.onUserEnter = function(userInfo, isMe) {
    var user;
    user = new this.server.UserImpl(this, userInfo, isMe);
    this.usersById[user.id] = user;
    this.usersBySid[user.sid] = user;
    return user;
  };

  Room.prototype.onUserExit = function(id) {
    var user;
    user = this.usersById[id];
    delete this.usersById[id];
    delete this.usersBySid[user.sid];
    return user;
  };

  Room.prototype.exit = function() {
    return this.server.exitRoom();
  };

  Room.prototype.onExit = function() {};

  return Room;

})();

User = (function() {
  function User(room, userInfo, isMe) {
    this.room = room;
    this.id = userInfo.id;
    this.sid = userInfo.sid;
    this.isMe = !!isMe;
  }

  return User;

})();

exports.Server = Server;

exports.Room = Room;

exports.User = User;
