// Generated by CoffeeScript 1.7.1
var Room, Server, User, WsServer;

WsServer = require('ws').Server;

Server = (function() {
  function Server(httpServer, RoomImpl, UserImpl) {
    this.httpServer = httpServer;
    this.RoomImpl = RoomImpl;
    this.UserImpl = UserImpl;
    this.wss = new WsServer({
      server: this.httpServer
    });
    this.wss.on('connection', this.onConnection.bind(this));
    this.roomsById = {};
    this.roomsBySid = {};
    this.bystanders = {};
    this.lastUserId = 0;
    this.lastRoomId = 0;
  }

  Server.prototype.onConnection = function(ws) {
    var id, user;
    id = this.lastUserId++;
    user = new this.UserImpl(id, ws, this);
    this.bystanders[id] = user;
    return user.open();
  };

  Server.prototype.getOrCreateRoom = function(sid) {
    var room;
    room = this.roomsBySid[sid];
    if (room) {
      return room;
    }
    room = new this.RoomImpl(this, this.lastRoomId++, sid);
    this.roomsById[room.id] = room;
    this.roomsBySid[room.sid] = room;
    return room;
  };

  Server.prototype.onUserEnterRoom = function(user) {
    return delete this.bystanders[user.id];
  };

  Server.prototype.onUserExitRoom = function(user) {
    return this.bystanders[user.id] = user;
  };

  Server.prototype.onUserQuit = function(user) {
    return delete this.bystanders[user.id];
  };

  Server.prototype.closeRoom = function(room) {
    delete this.roomsById[room.id];
    return delete this.roomsBySid[room.sid];
  };

  return Server;

})();

Room = (function() {
  function Room(server, id, sid) {
    this.server = server;
    this.id = id;
    this.sid = sid;
    this.usersById = {};
    this.usersBySid = {};
    this.nUsers = 0;
  }

  Room.prototype.onUserEnter = function(user) {
    this.server.onUserEnterRoom(user);
    user.uniqueifySidForRoom(this);
    this.usersById[user.id] = user;
    this.usersBySid[user.sid] = user;
    this.nUsers++;
    return this.sendToRest('userEnter', user.getUserInfo(), user.id);
  };

  Room.prototype.onUserExit = function(user) {
    delete this.usersById[user.id];
    delete this.usersBySid[user.sid];
    this.nUsers--;
    this.server.onUserExitRoom(user);
    if (this.nUsers === 0) {
      return this.server.closeRoom(this);
    } else {
      return this.sendToAll('userExit', user.id);
    }
  };

  Room.prototype.sendToAll = function(type, msg) {
    var id, user, _ref;
    _ref = this.usersById;
    for (id in _ref) {
      user = _ref[id];
      user.send(type, msg);
    }
  };

  Room.prototype.sendToRest = function(type, msg, exceptId) {
    var id, user, _ref;
    _ref = this.usersById;
    for (id in _ref) {
      user = _ref[id];
      if (user.id !== exceptId) {
        user.send(type, msg);
      }
    }
  };

  Room.prototype.getRoomInfo = function() {
    return {
      id: this.id,
      sid: this.sid,
      userInfos: this.getUserInfos()
    };
  };

  Room.prototype.getUserInfos = function() {
    var id, user, _ref, _results;
    _ref = this.usersById;
    _results = [];
    for (id in _ref) {
      user = _ref[id];
      _results.push(user.getUserInfo());
    }
    return _results;
  };

  return Room;

})();

User = (function() {
  function User(id, ws, server) {
    this.id = id;
    this.ws = ws;
    this.server = server;
    this.sid = 'user-' + this.id;
    this.room = null;
    this.isClosing = false;
    this.listeners = {};
  }

  User.prototype.listen = function(type, func) {
    return this.listeners[type] = func;
  };

  User.prototype.open = function() {
    this.listen('enterRoom', this.onEnterRoom.bind(this));
    this.listen('exitRoom', this.onExitRoom.bind(this));
    this.ws.onmessage = this.onMessage.bind(this);
    this.ws.onerror = this.onError.bind(this);
    return this.ws.onclose = this.onClose.bind(this);
  };

  User.prototype.close = function() {
    if (this.isClosing) {
      return;
    }
    this.isClosing = true;
    this.onExitRoom();
    this.server.onUserQuit(this);
    return this.ws.close();
  };

  User.prototype.send = function(type, msg, cb) {
    return this.ws.send(JSON.stringify([type, msg], cb));
  };

  User.prototype.uniqueifySidForRoom = function(room) {};

  User.prototype.onMessage = function(event) {
    var listener, msg, type, _ref;
    _ref = JSON.parse(event.data), type = _ref[0], msg = _ref[1];
    listener = this.listeners[type];
    if (listener) {
      return listener(msg);
    }
  };

  User.prototype.onClose = function(event) {
    return this.close();
  };

  User.prototype.onError = function(event) {
    return console.error('socket-error', event);
  };

  User.prototype.onEnterRoom = function(sid) {
    if (this.room) {
      this.send('enterRoom', {
        err: 'You *are* in a room.'
      });
      return;
    }
    this.room = this.server.getOrCreateRoom(sid);
    this.room.onUserEnter(this);
    return this.send('enterRoom', {
      roomInfo: this.room.getRoomInfo(),
      you: this.id
    });
  };

  User.prototype.onExitRoom = function() {
    if (!this.room) {
      return;
    }
    this.room.onUserExit(this);
    return this.room = null;
  };

  User.prototype.getUserInfo = function() {
    return {
      id: this.id,
      sid: this.sid
    };
  };

  return User;

})();

exports.Server = Server;

exports.Room = Room;

exports.User = User;
